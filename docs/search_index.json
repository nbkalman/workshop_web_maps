[["index.html", "Building Web Maps with Leaflet Overview 0.1 Description 0.2 Learning Objectives 0.3 Skills 0.4 Prerequisites 0.5 Software &amp; Tools", " Building Web Maps with Leaflet Dr. Michele Tobias Arthur Koehl Naomi Kalman 2023-04-28 Overview 0.1 Description In this workshop, attendees will be introduced to building an interactive web map to display spatial data using the Leaflet javascript library. 0.2 Learning Objectives In this workshop, attendees will learn Introductory HTML skills, in particular, the tags that are most commonly used to format text on a webpage How to load javascript libraries into a web page An introduction to the Leaflet javascript library Where to get additional help with HTML and Leaflet Best practices for communicating data distributions with a web map 0.3 Skills In this workshop, participants will be introduced to the following skills: HTML Javascript Leaflet Javascript Library 0.4 Prerequisites Learners should have a basic understanding of spatial data formats such as vector and raster data, as well as experience with any coding language. Learners with previous experience with coding in HTML and javascript will have an easier time learning, but these skills are not required. Learners should also be able to find, move, and manage files on their computer operating system. 0.5 Software &amp; Tools This workshop requires that the learn has installed and has access to the following software: Text editor, preferably with syntax highlighting. Options include Atom for all operating systems or Notepad++ for Windows. Web browser, such as Chrome, Firefox, Edge, or Safari (just not Internet Explorer). "],["introduction.html", "1 Introduction 1.1 What is a “Web Map”? 1.2 Why make a web map? 1.3 Examples 1.4 Workflow 1.5 Leaflet 1.6 Workshop Data: UC Davis Campus Food", " 1 Introduction 1.1 What is a “Web Map”? There are many ways to include maps in web pages. The two most common are as a static map or as a web map. A static map is an image (for example, a .tiff, .png, or .jpg file) of a map. The user cannot change the scale or content. Static maps are useful for applications where interactivity isn’t needed. Images are easily rendered by web browsers and are fairly easy to add to web pages. The term web map typically refers to a map embedded in a webpage. The map allows the user to interact with the data in some way. Often, the user can pan and zoom to adjust the view and click on data markers to learn more information about a location. 1.2 Why make a web map? Web maps can be a powerful way to share spatial information with other people, especially when you expect the viewer to want to explore the data in different ways. Web maps allow the user to customize their experience in ways that a static map cannot. Because of the interactivity, they can be a more engaging way for your audience to learn about a topic of interest and for you to offer a narative about the data. Web maps can also be a way to interact with a community of interest, enabling a researcher to both share and collect spatial information from a community. Web maps are good for data that is inherently dynamic, such as data with many factors or has a time component. Allowing the viewer to change what aspects of the data are shown on the map can help users explore complex data. Web maps can be a fun way to interact with data. Web maps offer novel and creative ways to visualize data. Web maps are easy to share, modify, update, and document. 1.3 Examples Examples of informative and engaging web maps abound on the internet. Here are a few examples that make use of Leaflet, the javascript library we’ll be working with today: UC Davis Potential COVID Workplace Exposures Map - UC Davis DataLab - An example with a dynamic timeline feature and data is updated daily from a web scraping script UK COVID-19 Predictions - Lancaster University Medical School - Includes a timeline animation and choice of visualizations of case incidence predictions OpenRailwayMap - Offers choice of data to visualize; data from a community-contributed dataset of railway infrastructure worldwide California Beach Plant Species Distributions - Michele Tobias - An example of linking navigation in multiple maps Numerical taxonomy of urban form in Amsterdam and Prague - Martin Fleischmann - a map supporting and academic manuscript NASA Curiosity Rover’s Location on Mars - NASA - An example of how Leaflet can be used with non-Earth coordinate systems and how the interface can be highly customized 1.4 Workflow At first glace, building a web map might seem daunting, but we’ll take it one step at a time and build up to an engaging demonstration of what web maps can do. To make an online interactive web map, we’ll need to complete several steps. Typically these steps include: Make a webpage to contain the web map code (coding in HTML) Write the web map code and put it into the webpage (coding in javascript) Put the web page online 1.5 Leaflet In today’s workshop, we’ll be using a javascript library called Leaflet to write the code that will make our web map. Leaflet is a popular open source javascript library specifically designed to build interactive web maps with a combination of data available online (like tile services for basemaps) and your own data. Leaflet is well-documented and has excellent tutorials to illustrate common tasks and innovative uses of the tool. In addition, there is an active community using this tool so there is ample support on online message boards and social media outlets. You can also use leaflet with the R programming language through the leaflet package, which can be a handy way to add maps to your R Markdown files or Shiny applications. This, however cool, is not a part of today’s workshop. 1.5.1 Other Web Map Tools Leaflet is not the only tool available to create web maps. There are many tools and services that you can use to make webs maps, each with their own advantages, required skill sets, and price points. If you’d like to explore other options, you might consider Carto, Mapbox, ArcGIS Online, Story Maps (of the Knight Labs [open source] or ESRI [proprietary] flavors), Mango Map, GIS Cloud, Google Maps, D3, Here Maps, Felt, or OpenLayers. 1.6 Workshop Data: UC Davis Campus Food In today’s workshop, we’ll be working with the UC Davis Campus Food data set that was created by Naomi Kalman for this workshop. It shows places to get grab-and-go food on campus, in case you need to pick up a meal that is already prepared. Note: Naomi did this frequently and favors a tuna sandwich from the Silo Market. The data for this workshop is a subset of Naomi’s Google Map, downloaded on 2023-04-04 and used with permission from the author. For this workshop, DataLab staff have processed the data from its original KML format to create a .geojson file embedded in a javascript file (more details on this process and why we did it to come). "],["set-up.html", "2 Set Up 2.1 Download the Data 2.2 Folders 2.3 Files", " 2 Set Up Before we do any coding, let’s set up our file and folder structure. 2.1 Download the Data The data for the workshop is available to download from this box drive. You can download the file itself or click the download button in the upper right corner of the screen. (You may need to dismiss a message about logging in to see the button, but you do not need to log in to download the data.) Save the file to a folder on your computer that you can find. If the file you downloaded is a .zip file, unzip the file. The data for this workshop is one javascript file called campus_food.js and a folder called img with 9 images. 2.2 Folders Using your computer’s file browsing program, navigate to a folder you want to work in. In that folder, create a new folder to hold your files for this project, such as my_web_map. Inside that folder, create another folder called docs. The docs folder will hold the HTML and javascript files that will create our web map. Your folder structure should now look like this: my_web_map |-- docs 2.3 Files Move the file you downloaded for this workshop called campus_food.js and the folder called ‘img’ into the docs folder. Open your preferred text editor application. Create a new, blank file. Save it inside your docs folder and call it index.html. This will be the homepage for our web site that will hold our web map. Your folder and file structure should now look like this: my_web_map |-- docs | |-- img | |-- campus_food.js | |-- index.html "],["build-a-webpage.html", "3 Build a Webpage 3.1 Intro to HTML 3.2 Start Building your Webpage", " 3 Build a Webpage The first step in building a web map is to make a basic webpage to house our map. It doesn’t need to be elaborate to get started, but we do need to understand some concepts. 3.1 Intro to HTML HTML stands for “hypertext markup language”. If you’ve ever used R Markdown or GitHub Markdown or worked in a Jupiter Notebook, you’ll notice some similarities, but probably more differences. The key thing to understand about HTML is that every element (text, code, images, etc.) you put into your code needs to be labeled to tell the web browser how to render that element. We label the elements with a tag. We label the start of an element with an opening tag, such as &lt;p&gt; to start a paragraph, and end it with a closing tag, such as &lt;/p&gt;. Some tags are special and don’t need to be closed, such as a line break &lt;br&gt;, but those are rare. For example: &lt;h1&gt;This is a heading&lt;/h1&gt; &lt;p&gt;This is text in a paragraph.&lt;/p&gt; There are tags for many types of elements. W3Schools lists them alphabetically in their HTML Element Reference. We’ll learn a few of the common tags as we build our webpage. 3.2 Start Building your Webpage Open the index.html file (it’s in the ‘docs’ folder) in a text editor either by starting your text editor program and loading the index.html file, or right clicking on the file in your file browser, choosing “open with” from the menu, and then choosing the editor program you want to use. Using a text editor with syntax highlighting can be helpful, but isn’t mandatory. Since we just created it, the file is blank. We’ll add some code to get started. The first, we need to indicate that our text file contains HTML, and then place opening and closing tags to indicate which part of the document contains HTML. We’ll eventually write our webpage code between those HTML tags. &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;/html&gt; Open your index.html file in a web browser such as Chrome or Firefox. Double clicking on the file in your file explorer will open it in your default browser. Yes, it’s ok that we have the same file open in two programs because the browser just renders the file and you can’t edit it from here. We’ve made a blank webpage! Now, let’s add something more interesting to it. The beginning of the HTML document is where you normally place the parameters and settings that make the webpage work. We’ll add a section called head to our page to contain some of these parameters. Inside of the head section, we’ll indicate the title of our webpage, wrapped in &lt;title&gt; tags. This puts the name of the webpage in the tab at the top of the browser. NOTE: We’ll highlight new text and code that we add to the code sections in yellow to draw attention to what’s changed. &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;highlight&gt;&lt;head&gt; &lt;title&gt;UC Davis Campus Food Map&lt;/title&gt; &lt;/head&gt;&lt;/highlight&gt; &lt;/html&gt; If you reload the index.html file in your web browser, you’ll have a blank page with a tab called “UC Davis Campus Food Map”. The body section of a web page contains the code that appears on the actual web page. We’ll add a body section and some information. Note that &lt;h1&gt; makes a heading and &lt;p&gt; makes a paragraph. &lt;html&gt; &lt;head&gt; &lt;title&gt;UC Davis Campus Food Map&lt;/title&gt; &lt;/head&gt; &lt;highlight&gt;&lt;body&gt; &lt;h1&gt;UC Davis Campus Food Map&lt;/h1&gt; &lt;p&gt;This webmap shows the locations of UC Davis campus grab-and-go dining options.&lt;/p&gt; &lt;/body&gt;&lt;/highlight&gt; &lt;/html&gt; Reload your index.html document in your browser to see your new text. You have now written a short but very legitimate HTML webpage! We could certainly write more text, but for the sake of demonstration, we’ll keep it short for now. In the next section, we’ll build the code that makes our web map. CHECK YOUR WORK: Compare your code with example code up to this point in the workshop. "],["prepare-your-page-for-a-leaflet-web-map.html", "4 Prepare Your Page for a Leaflet Web Map 4.1 Load The External Files 4.2 Add a Map Div 4.3 Add a Script Section", " 4 Prepare Your Page for a Leaflet Web Map START FROM HERE: You can keep working on your code from the previous section, or use the example code up to this point in the workshop. Now that we’ve made a basic webpage, we can add our web map. 4.1 Load The External Files In the head section of our webpage, we need to add some information that will tell our map how to appear (the CSS file) and where to find the Leaflet package (Leaflet JavaScript file). CSS stands for Cascading Style Sheet. You can think of this as the parameters that set the way certain objects are displayed in a website. The pre-made file we’ll load specifically styles the map elements made with Leaflet. Loading the Leaflet JavaScript file enables our webpage to have access to the functions and tools in the Leaflet Library. For R or Python users, this is similar to loading packages or libraries in your code. We could save a static version of this library in our website folders and point to that, or we can link to an online version of it, like we have done in the code below. For the most recent version of these links, check the Leaflet Download page in the section called “Using a Hosted Version of Leaflet”. &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;UC Davis Campus Food Map&lt;/title&gt; &lt;highlight&gt; &lt;!--Load the Leaflet CSS file --&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/leaflet@1.9.3/dist/leaflet.css&quot; integrity=&quot;sha256-kLaT2GOSpHechhsozzB+flnD+zUyjE2LlfWPgU04xyI=&quot; crossorigin=&quot;&quot; /&gt; &lt;!--Load the Leaflet JavaScript file --&gt; &lt;script src=&quot;https://unpkg.com/leaflet@1.9.3/dist/leaflet.js&quot; integrity=&quot;sha256-WBkoXOwTeyKclOHuWtc+i2uENFpDZ9YPdf5Hf+D7ewM=&quot; crossorigin=&quot;&quot;&gt;&lt;/script&gt; &lt;/highlight&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;UC Davis Campus Food Map&lt;/h1&gt; &lt;p&gt;This webmap shows the locations of UC Davis campus grab-and-go dining options.&lt;/p&gt; &lt;/body&gt; &lt;/html&gt; Note that in HTML, comments are written like this: &lt;!-- This is a comment --&gt;. Comments are information for a person writing or reading the code and don’t render on the website. The code we just added doesn’t make any visible changes on our website so if you reload your web page, you won’t notice anything new, but it should load. If it has an error or the text doesn’t show up, you’ll need to debug your code. 4.2 Add a Map Div A &lt;div&gt; element defines a section in your HTML document. Our web map needs its own &lt;div&gt;. We’ll add one inside the &lt;body&gt; of the webpage. Note that the &lt;div&gt; has an ID named mapid. This will let us create settings and code that apply to this specific &lt;div&gt;. We can define the style of the &lt;div&gt; inside the tag (as we have done below) or we could do it in the &lt;head&gt; of the document in a &lt;style&gt; subsection, or in a separate CSS file. There are many good reasons to choose any of these places. We’re defining the style inside the &lt;div&gt; tag to make it easier to see how it applies to this specific &lt;div&gt; and to keep the code for the map all in one place. &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;UC Davis Campus Food Map&lt;/title&gt; &lt;!--Load the Leaflet CSS file --&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/leaflet@1.9.3/dist/leaflet.css&quot; integrity=&quot;sha256-kLaT2GOSpHechhsozzB+flnD+zUyjE2LlfWPgU04xyI=&quot; crossorigin=&quot;&quot; /&gt; &lt;!--Load the Leaflet JavaScript file --&gt; &lt;script src=&quot;https://unpkg.com/leaflet@1.9.3/dist/leaflet.js&quot; integrity=&quot;sha256-WBkoXOwTeyKclOHuWtc+i2uENFpDZ9YPdf5Hf+D7ewM=&quot; crossorigin=&quot;&quot;&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;UC Davis Campus Food Map&lt;/h1&gt; &lt;p&gt;This webmap shows the locations of UC Davis campus grab-and-go dining options.&lt;/p&gt; &lt;highlight&gt; &lt;div id=&quot;mapid&quot; style=&quot;width: 600px; height: 400px;&quot;&gt;&lt;/div&gt; &lt;/highlight&gt; &lt;/body&gt; &lt;/html&gt; If you reload your index.html file in your browser, you shouldn’t notice any difference. If the page doesn’t load, however, you’ll need to troubleshoot your code. Make sure your tags open and close in the right order. 4.3 Add a Script Section Finally, we need to add a section to our code to hold the Leaflet JavaScript code we will write to make our map. Just below your map &lt;div&gt; (and inside the body section), add open and closed &lt;script&gt; tags. &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;UC Davis Campus Food Map&lt;/title&gt; &lt;!--Load the Leaflet CSS file --&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/leaflet@1.9.3/dist/leaflet.css&quot; integrity=&quot;sha256-kLaT2GOSpHechhsozzB+flnD+zUyjE2LlfWPgU04xyI=&quot; crossorigin=&quot;&quot; /&gt; &lt;!--Load the Leaflet JavaScript file --&gt; &lt;script src=&quot;https://unpkg.com/leaflet@1.9.3/dist/leaflet.js&quot; integrity=&quot;sha256-WBkoXOwTeyKclOHuWtc+i2uENFpDZ9YPdf5Hf+D7ewM=&quot; crossorigin=&quot;&quot;&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;UC Davis Campus Food Map&lt;/h1&gt; &lt;p&gt;This webmap shows the locations of UC Davis campus grab-and-go dining options.&lt;/p&gt; &lt;div id=&quot;mapid&quot; style=&quot;width: 600px; height: 400px;&quot;&gt;&lt;/div&gt; &lt;highlight&gt; &lt;script&gt; &lt;/script&gt; &lt;/highlight&gt; &lt;/body&gt; &lt;/html&gt; CHECK YOUR WORK: Compare your code with example code up to this point in the workshop. "],["add-a-map.html", "5 Add a Map 5.1 Add A Map 5.2 Add a Marker", " 5 Add a Map START FROM HERE: You can keep working on your code from the previous section, or use the example code up to this point in the workshop. Now that we’ve prepared our webpage we can add our web map. 5.1 Add A Map Now we’re ready to add a map. We’ll make a simple one to start and add more data later. Inside the &lt;script&gt; section, we’ll now be writing javascript. // is how you indicate a comment in JavaScript. Outside of this section, you’ll be writing HTML. It can get confusing sometimes, so have patience with yourself. First, we’ll create an empty map in our mapid &lt;div&gt;, then we’ll load Stamen’s Toner tile service to use as a background layer. The limited color palette of the Toner tile service will make it easier to see the data we’ll be loading later. A tile service is a pre-built background layer that is available at various geographic scales. The data is stored on a server and we can request the data show up in our map. Some of these are free and open. Other require registration or charge a fee. Stamen has several free (and beautiful) tile services that we can use. Note: from now on, we’ll be working in the &lt;script&gt; section, so the code will just show this section to avoid clutter and focus on what’s changing in the code. &lt;script&gt; &lt;highlight&gt; //add an empty map called &quot;foodmap&quot; to the page in the mapid div var foodmap = L.map(&#39;mapid&#39;, { center: [38.538592, -121.75], zoom: 15 }); //add the base map = Stamen Toner tile layer var Stamen_Toner = L.tileLayer(&#39;https://stamen-tiles-{s}.a.ssl.fastly.net/toner/{z}/{x}/{y}.{ext}&#39;, { attribution: &#39;Map tiles by &lt;a href=&quot;http://stamen.com&quot;&gt;Stamen Design&lt;/a&gt;, &lt;a href=&quot;http://creativecommons.org/licenses/by/3.0&quot;&gt;CC BY 3.0&lt;/a&gt; &amp;mdash; Map data &amp;copy; &lt;a href=&quot;http://www.openstreetmap.org/copyright&quot;&gt;OpenStreetMap&lt;/a&gt;&#39;, subdomains: &#39;abcd&#39;, minZoom: 0, maxZoom: 20, ext: &#39;png&#39; }); foodmap.addLayer(Stamen_Toner); &lt;/highlight&gt; &lt;/script&gt; Your web page should now have a map with Stamen’s Toner tile layer. It should look something like this: We’ll add some of our own data to the map next. 5.2 Add a Marker Let’s add a marker so we can find the Quad. The marker will be a blue inverted teardrop that will have a tooltip that says “Quad” when you hover over it. At the end of your script section, add: &lt;highlight&gt; //add a marker for the Quad with a tooltip //Quad coordinates: 38.541162, -121.749371 var marker = new L.marker([38.541112, -121.749350], { opacity: 1.0 //teardrop marker opacity may be set to zero }); marker.bindTooltip(&quot;&lt;b&gt;Quad&lt;/b&gt;&quot;, { }); marker.addTo(foodmap); &lt;/highlight&gt; &lt;/script&gt; You now have an interactive map with one marker! Notice the order of the code: we first define the marker, then add the tooltip to the marker, and finally we have to add the marker to the map. Defining, adding specifications, then adding an item to the map is a pretty common workflow in Leaflet. CHECK YOUR WORK: Compare your code with example code up to this point in the workshop. "],["use-external-data.html", "6 Use External Data 6.1 About GeoJSON 6.2 Formatting the Data 6.3 Read the Data 6.4 Add Data to the Map", " 6 Use External Data START FROM HERE: You can keep working on your code from the previous section, or use the example code up to this point in the workshop. Adding markers by hand is great, but what if we have a lot of data? Or what if our data is more complex than a few points to add? What if we want to prepare our data in a GIS or with a script ahead of time? If any of these situations apply to the work we want to do, we probably want to load data from a data file, not writing it out in the code. There are many methods to load an external data file in Leaflet. We’ll look at just one here, but there are ways to work with any of the common file types. Here, we’ll use data in geoJSON format. 6.1 About GeoJSON GeoJSON is a spatial data format based on the JSON format. Both JSON and GeoJSON are open standard file formats that text-based (not binary). They store data as attribute-value pairs, such as \"Name\": \"Bob\" in our example below. You might think of this as the files storing the column name and the value for that column for a row in the table. Because they are text-based, they are human-readable (however, depending on the complexity of the data, you may not want to try to read it in a text editor). Another advantage of using a text-based format is that it can easily be stored in online version control systems like GitHub, as long as a file size isn’t too big. This is a nice feature if you want to host your webmap on GitHub Pages. Any of the major GIS tools or programming languages can convert vector data to GeoJSON format. The header and first line of our Campus Food data looks something like this in GeoJSON (we removed the link URLs and added white space and indents for readability): &quot;type&quot;: &quot;FeatureCollection&quot;, &quot;name&quot;: &quot;campus_food&quot;, &quot;crs&quot;: { &quot;type&quot;: &quot;name&quot;, &quot;properties&quot;: { &quot;name&quot;: &quot;urn:ogc:def:crs:OGC:1.3:CRS84&quot; } }, &quot;features&quot;: [ { &quot;type&quot;: &quot;Feature&quot;, &quot;properties&quot;: { &quot;Name&quot;: &quot;CoHo Grab and Go&quot;, &quot;description&quot;: &quot;Grapes, cheese, yogurt, sandwiches, etc. in a refrigerated case by the drinks&quot;, &quot;gx_media_links&quot;: &quot;(URL goes here)&quot;, &quot;img_name&quot;: &quot;coho.jpg&quot; }, &quot;geometry&quot;: { &quot;type&quot;: &quot;Point&quot;, &quot;coordinates&quot;: [ -121.7497985, 38.5421103, 0.0 ] } } 6.2 Formatting the Data For the sake of time in this workshop, we’ve already formatted the data for you, but let’s talk about what we did. Leaflet can’t read GeoJSON directly, but we can turn the data file into a javascript (.js) file that Leaflet can understand. All we have to do is open the .geojson file in a text editor, add var varable-name = { at the beginning of the file, and } at the end of the file (we’re “wrapping” the data in a variable declaration). Then we save the file with a .js extension (because what we’ve actually done is written a small JavaScript file). We now have a javascript file that reads data from the GeoJSON text and creates a new variable containing our data. We’ve done this for you to create the campus_food.js file, declaring our variable as campus_food. You can see the GeoJSON structure and the variable declaration if you open the file in a text editor. 6.3 Read the Data To read the data into our webpage, we need to add another short script section, just above the one we’ve been working in that calls our campus_food.js data file. &lt;body&gt; &lt;h1&gt;UC Davis Campus Food Map&lt;/h1&gt; &lt;p&gt;This webmap shows the locations of UC Davis campus grab-and-go dining options.&lt;/p&gt; &lt;div id=&quot;mapid&quot; style=&quot;width: 600px; height: 400px;&quot;&gt;&lt;/div&gt; &lt;highlight&gt;&lt;script src=&quot;campus_food.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;&lt;/highlight&gt; &lt;script&gt; Now the data in this file will be available to load into our map. NOTE: You could put this script in the &lt;head&gt; of the document where we loaded the Leaflet and CSS scripts. I like to keep all the map code together for teaching purposes (less scrolling around). Both are valid and work the same. 6.4 Add Data to the Map This is the moment you’ve been waiting for! We’ll add data from our external data file to the map. Add this code to the bottom of your long script section (below where we made our marker for the Quad and above the closing &lt;/script&gt; tag): &lt;highlight&gt; //add food points from the GeoJSON (campus_food.js) file var foodpoints = L.geoJSON(campus_food, { pointToLayer: function(feature, latlng){ return L.circleMarker(latlng, {color: &#39;orange&#39;, radius: 8}); } }).addTo(foodmap); &lt;/highlight&gt; &lt;/script&gt; We now have many orange circles for our dining spots (and one for the quad that we added earlier)! What does this code do though? First, we create a variable called foodpoints using the geojson data which we named campus_food inside the .js file. Then we create a function called pointToLayer that uses the parameters feature (each row in the data) and latlng (the geometry) from the geojson data. We make a circleMarker using the latlng variable for the position, and use the style options between the {}s to style the marker the way we want it. In this case, it’s orange and has a radius of 8 (which is a little smaller than the default). Finally, we add the entire set of markers we built to the map (remember that we called our div that holds our map foodmap). CHECK YOUR WORK: Compare your code with example code up to this point in the workshop. "],["add-a-popup.html", "7 Add a popup 7.1 Add a popup 7.2 Customize Popup Text with Data 7.3 Add details to the popup text 7.4 Add a description to the popup 7.5 Add an image to the popup", " 7 Add a popup START FROM HERE: You can keep working on your code from the previous section, or use the example code up to this point in the workshop. Next we’ll add popups to our points. 7.1 Add a popup It would be nice to have some information available for each marker. Let’s make a popup that tells us about each location. We’ll start with a text popup and gradually add more to it. We made our markers for our point locations by iterating over the list of features in our dataset and making a marker for each of them. We can add a function to the one we already have so that once the markers get made, each will get a popup. We’ll modify our code that adds our points to look like this: //add food points from the GeoJSON (campus_food.js) file var foodpoints = L.geoJSON(campus_food, { pointToLayer: function(feature, latlng){ return L.circleMarker(latlng, {color: &#39;orange&#39;, radius: 8}); }&lt;highlight&gt;, onEachFeature: function(feature, layer){ layer.bindPopup(&quot;This is a popup!&quot;); }&lt;/highlight&gt; }).addTo(foodmap); What did we do? After the pointToLayer function, we added a new created a new function called OnEachFeature that uses the feature (each row of the data) and the layer information. For each feature, we have it bind a popup to our layer (named foodpoints) and put the text that is in the parentheses into the popup. For now, all of our popups will say “This is a popup!”. We’ll build on that next. 7.2 Customize Popup Text with Data This is progress! We have a map with points and popups that contain placeholder text. Let’s use the attribute data from our foodpoints layer to add the name of each location to the popup. Instead of the “This is a popup!” text, we can use the attribute data from our foodpoints data. Replace the current “This is a popup!” text with: feature.properties.Name (with no quotes around it). As we loop through each row of our data, the code will add each location’s name to the popup. //add food points from the GeoJSON (campus_food.js) file var foodpoints = L.geoJSON(campus_food, { pointToLayer: function(feature, latlng){ return L.circleMarker(latlng, {color: &#39;orange&#39;, radius: 8}); }, onEachFeature: function(feature, layer){ layer.bindPopup(&lt;highlight&gt;feature.properties.Name&lt;/highlight&gt;); } }).addTo(foodmap); 7.3 Add details to the popup text What if we want to give the popup more context? The text for the popup can be plain text, but we can also use HTML to style the text like a very small webpage. (If your head is starting to spin from switching languages… HTML page containing JavaScript containing HTML… this is normal.) We’ll start small and build up to something more complex. Maybe we want to indicate that the text in the popup is the name of the location. We can concatenate (paste together) some text with HTML styling with our code to get the location names: \"&lt;b&gt;Name: &lt;/b&gt;\" + feature.properties.Name //add food points from the GeoJSON (campus_food.js) file var foodpoints = L.geoJSON(campus_food, { pointToLayer: function(feature, latlng){ return L.circleMarker(latlng, {color: &#39;orange&#39;, radius: 8}); }, onEachFeature: function(feature, layer){ layer.bindPopup(&lt;highlight&gt;&quot;&lt;b&gt;Name: &lt;/b&gt;&quot; + &lt;/highlight&gt;feature.properties.Name); } }).addTo(foodmap); Our popups are starting to be much more useful! 7.4 Add a description to the popup Ready to get a little more complex? Let’s add a description of the location. We can use &lt;br&gt; to create a line break and put text onto a new line: \"&lt;b&gt;Name: &lt;/b&gt;\" + feature.properties.Name + \"&lt;br&gt;&lt;b&gt;Description: &lt;/b&gt;\"+ feature.properties.description This gets harder to read the longer it gets, so sometimes it helps to write the HTML pieces on separate lines, and once you’re ready to run it, put all the text onto one line. The text portion of our popup text needs to be wrapped in quotation marks but the calls for the data should not be. //add food points from the GeoJSON (campus_food.js) file var foodpoints = L.geoJSON(campus_food, { pointToLayer: function(feature, latlng){ return L.circleMarker(latlng, {color: &#39;orange&#39;, radius: 8}); }, onEachFeature: function(feature, layer){ layer.bindPopup(&quot;&lt;b&gt;Name: &lt;/b&gt;&quot; + feature.properties.Name &lt;highlight&gt;+ &quot;&lt;br&gt;&lt;b&gt;Description: &lt;/b&gt;&quot;+ feature.properties.description&lt;/highlight&gt;); } }).addTo(foodmap); 7.5 Add an image to the popup In our data, we have a column that has a link to a picture of each location. Let’s put the picture at the top of the popup. The &lt;img&gt; tag will add an image to our popup. Because our images are stored as relative paths instead of hosted somewhere online, we get the image name stored with each food location in the geojson and use it to point to the image name in the img folder that is saved in the docs folder: \"&lt;img src='images/\"+feature.properties.img_name +\"' width='259'&gt;&lt;br&gt;&lt;b&gt;Name: &lt;/b&gt;\" + feature.properties.Name + \"&lt;br&gt;&lt;b&gt;Description: &lt;/b&gt;\"+ feature.properties.description Here’s what the section of our code that adds the foodpoints marker should now look like: //add food points from the GeoJSON (campus_food.js) file var foodpoints = L.geoJSON(campus_food, { pointToLayer: function(feature, latlng){ return L.circleMarker(latlng, {color: &#39;orange&#39;, radius: 8}); }, onEachFeature: function(feature, layer){ layer.bindPopup( &quot;&lt;highlight&gt;&lt;img src=&#39;img/&quot; + feature.properties.img_name + &quot;&#39; width=&#39;259&#39;/&gt;&lt;br&gt;&lt;/highlight&gt;&lt;b&gt;Name: &lt;/b&gt;&quot; + feature.properties.Name + &quot;&lt;br&gt;&lt;b&gt;Description: &lt;/b&gt;&quot;+ feature.properties.description); } }).addTo(foodmap); And here is our web map: CHECK YOUR WORK: Compare your code with example code up to this point in the workshop. "],["put-your-web-page-online.html", "8 Put Your Web Page online", " 8 Put Your Web Page online There are many options to put your web page online so others can see and interact with it. At the heart of the task is moving your docs folder to an online server and having some way to host the website. One option that is free of cost and well-documented is to use GitHub Pages (see the instructions for a “project site”). "],["resources.html", "9 Resources", " 9 Resources In the workshop, we learned the basics of building a webpage that contains an interactive web map. We learned some basic HTML and javascript, in particular the Leaflet javascript library. There is so much more you can learn and create! Here are some resources to help you build on the skills you learned in this workshop: Leaflet Reference - tutorials and documentation for the Leaflet javascript library W3Schools - a good reference for HTML, CSS, &amp; general javascript Leafmap Basemap Search Tool - this is a python package, so it’s not directly applicable to this workshop, however it may be useful to help you discover other basemap options or point you to sources you didn’t know about OpenPlanetary Basemaps - a place to find basemaps for web maps of non-Earth planets; at the time of writing, The Moon and Mars were available. Programming Historian walk through Anatomy of a web map presentation leaflet R package Github Pages Documentation Open-Source Web-GIS Development Roadmap - How to develop your skills for web-based spatial tools and maps "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
